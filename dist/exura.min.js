class ExuraEnvironment{static configure=new Map([["version","1.0"],["mode","production"],["url",`${window.location.protocol}//${window.location.host}/`]]);static module=new Map();static store=new Map();static render=new Map();static boiler=new Map();static state=new Map();static effect=new Map()}class ExuraDom{constructor(selector="body"){this.target=document.querySelector(selector);return new Proxy(this,{get(target,prop){if(prop in target)return target[prop];if(typeof target.target[prop]==="function"){return(...args)=>{const result=target.target[prop](...args);return result===undefined?target:result}}return target.target[prop]},set(target,prop,value){target.target[prop]=value;return !0}})}text(content){if(content===undefined)return this.target.textContent;this.target.textContent=content;return this}html(content){if(content===undefined)return this.target.innerHTML;this.target.innerHTML=content;return this}attr(attr,value){if(value===undefined)return this.target.getAttribute(attr);this.target.setAttribute(attr,value);return this}append(content){this.target.append(content instanceof ExuraDom?content.target:content);return this}find(selector){return new ExuraDom(this.target.querySelector(selector))}on(event,callback){this.target.addEventListener(event,callback);return this}}class ExuraStore extends Map{constructor(entries){super(entries);}set(key,value){return super.set(key,value)}}class ExuraState extends Map{constructor(ID){super();this.ID=ID}set(key,value){const old=this.get(key);const changed=old!==value;super.set(key,value);if(changed){const eff=ExuraEnvironment.effect.get(this.ID);if(eff){const{deps,lastValues,effect}=eff;if(deps.includes(key)){const currVals=deps.map(dep=>this.get(dep));const depChanged=!lastValues||!currVals.every((v,i)=>v===lastValues[i]);if(depChanged&&typeof effect==="function"){eff.lastValues=currVals;effect()}}}}return this}}class Exura{static environment(env){}static module(fn){const ID=fn.name;fn.store=Exura.store(ID,{});fn.state=Exura.state(ID,{});if(document.querySelectorAll(`exura-${ID}`).length>0){const element=document.querySelector(`exura-${ID}`);ExuraEnvironment.render.set(ID,element);ExuraEnvironment.boiler.set(ID,element.innerHTML);fn.dom=Exura.dom(`exura-${ID}`);fn.render=(reBioler)=>{Exura.render(ID,reBioler)}}else{fn.dom=!1;fn.render=()=>{console.warn(`Component ${ID} Element Not Found`)}}fn.effect=(fn,dependencies)=>{Exura.effect(ID,fn,dependencies)};fn.router=(url,fn,element)=>{Exura.router(ID,url,fn,element)};ExuraEnvironment.module.set(ID,fn);window[ID]=ExuraEnvironment.module.get(ID)}static load(ID){return[ExuraEnvironment.module.get(ID),ExuraEnvironment.store.get(ID),ExuraEnvironment.state.get(ID),ExuraEnvironment.effect.get(ID),ExuraEnvironment.render.get(ID)]}static store(ID,data){if(!ExuraEnvironment.store.has(ID)){ExuraEnvironment.store.set(ID,new ExuraStore())}if(data){const current=ExuraEnvironment.store.get(ID);ExuraEnvironment.store.set(ID,new ExuraStore([...current,...Object.entries(data)]))}return ExuraEnvironment.store.get(ID)||!1}static render(ID,reBioler=null){if(reBioler!==null){ExuraEnvironment.boiler.set(ID,reBioler)}let boiler=ExuraEnvironment.boiler.get(ID);let render=ExuraEnvironment.render.get(ID);let store=ExuraEnvironment.store.get(ID);let state=ExuraEnvironment.state.get(ID);let data=new Map([...store,...state]);for(let[key,value] of data){boiler=boiler.replaceAll(`{{${key}}}`,value)}render.innerHTML=boiler}static state(ID,newState={}){let store=ExuraEnvironment.state.get(ID);if(!store){store=new ExuraState(ID);ExuraEnvironment.state.set(ID,store)}for(const[key,val] of Object.entries(newState)){store.set(key,val)}return store}static effect(ID,effectFn,deps=null){const state=ExuraEnvironment.state.get(ID)||new ExuraState(ID);ExuraEnvironment.state.set(ID,state);const effectData=ExuraEnvironment.effect.get(ID)||{deps:null,lastValues:[],effect:()=>{}};const shouldRun=(()=>{if(deps===null)return !0;if(deps.length===0&&!effectData.lastValues.length)return !0;const currValues=deps.map(dep=>state.get(dep));const changed=currValues.some((val,i)=>val!==effectData.lastValues[i]);effectData.lastValues=currValues;return changed})();effectData.deps=deps;effectData.effect=effectFn;ExuraEnvironment.effect.set(ID,effectData);if(shouldRun)effectFn()}static router(ID,endpoint,fn,element="route"){const el=document.querySelector(`exura-${element}`);if(!el)return;if(location.pathname===endpoint&&typeof fn==="function"){fn(el)}}static dom(selector){return new ExuraDom(selector)}}